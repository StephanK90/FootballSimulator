/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FootballSimulator;

import java.awt.Color;
import java.util.ArrayList;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JLabel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Stephan
 */
public class RankingFrame extends javax.swing.JFrame {

    private final Group grp; // create group
    private final MyTableModel model = new MyTableModel(); // create table model

    /**
     * Creates new form RankingFrame2
     * @param grp
     */
    // constructor with parameter to receive group data from the MatchFrame
    public RankingFrame(Group grp) {
        initComponents();

        // set group
        this.grp = grp;

        // create and fill table
        setTableModel();
        getData();

        /*
        // sort the data (points, goaldifference, goals, goalsagainst)
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model); // create table sorter
        table.setRowSorter(sorter);                                             // set table with sorter
        ArrayList<RowSorter.SortKey> sortKeys = new ArrayList();                // list to store sort keys
        sortKeys.add(new RowSorter.SortKey(5, SortOrder.DESCENDING));           // sort on team points
        sortKeys.add(new RowSorter.SortKey(8, SortOrder.DESCENDING));           // sort on team goal difference
        sortKeys.add(new RowSorter.SortKey(6, SortOrder.DESCENDING));           // sort on team goals
        sortKeys.add(new RowSorter.SortKey(7, SortOrder.DESCENDING));           // sort on team goals against
        sorter.setSortKeys(sortKeys);                                           // pass keys to sorter    
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        matchesBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Football Simulator");
        setMinimumSize(new java.awt.Dimension(1000, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 600));

        table.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        table.setEnabled(false);
        table.setGridColor(new java.awt.Color(255, 255, 255));
        table.setRowHeight(30);
        jScrollPane1.setViewportView(table);

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 48)); // NOI18N
        jLabel1.setText("Ranking");

        matchesBtn.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        matchesBtn.setText("Play Round / See Match Results");
        matchesBtn.setFocusable(false);
        matchesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchesBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel2.setText("Top 2 go to knock-outs");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(416, 416, 416)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 370, Short.MAX_VALUE)
                .addComponent(matchesBtn)
                .addGap(353, 353, 353))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(matchesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void matchesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchesBtnActionPerformed
        MatchFrame frame = new MatchFrame(this.grp); // open MatchOverViewFrame and pass group
        frame.setLocationRelativeTo(null); // makes frame open in center of screen
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE); // close frame when X is clicked
        frame.getContentPane().setBackground(Color.WHITE); // set backgroundcolor
        frame.setVisible(true); // set frame visible

        this.dispose(); // close this(ranking) frame
    }//GEN-LAST:event_matchesBtnActionPerformed

    // sets the table model
    private void setTableModel() {
        table.setModel(model);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.setDefaultRenderer(Object.class, centerRenderer);
        table.setDefaultRenderer(Integer.class, centerRenderer);
    }

    // fills the table with ranking data
    private void getData() {
        // add columns
        for (String s : grp.getRanking().getColumnNames()) {
            model.addColumn(s);
        }
        // add rows
        for (Object[] o : grp.getRanking().getData()) {
            model.addRow(o);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton matchesBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}

// to sort the table
class MyTableModel extends DefaultTableModel {

    @Override
    public Class getColumnClass(int col) {
        if (col != 0) {
            return Integer.class;
        } else {
            return String.class;
        }
    }
}
